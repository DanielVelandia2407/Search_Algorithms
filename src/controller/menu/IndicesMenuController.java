package controller.menu;

import controller.indexes.MultilevelPrimaryIndexController;
import controller.indexes.PrimaryIndexController;
import controller.indexes.SecondaryIndexController;
import controller.indexes.ImprovedMultilevelIndexController;
import view.menu.IndicesMenuView;
import view.menu.MainView;
import view.indexes.ImprovedMultilevelIndexView;
import view.indexes.MultilevelPrimaryIndexView;
import view.indexes.SecondaryIndexView;
import view.indexes.PrimaryIndexView;  // Nueva importaci√≥n

import javax.swing.JOptionPane;

public class IndicesMenuController {
    private IndicesMenuView indicesMenuView;
    private MainView mainView;

    public IndicesMenuController(IndicesMenuView indicesMenuView) {
        this.indicesMenuView = indicesMenuView;
        initializeListeners();
    }

    /**
     * Sets the reference to the main view for navigation purposes
     */
    public void setMainView(MainView mainView) {
        this.mainView = mainView;
    }

    /**
     * Initialize all button listeners for the indices menu
     */
    private void initializeListeners() {
        // Back button - returns to main menu
        this.indicesMenuView.addBackListener(e -> goBackToMainMenu());

        // Primary Index button - IMPLEMENTADO
        this.indicesMenuView.addPrimaryIndexListener(e -> openPrimaryIndex());

        // Secondary Index button - IMPLEMENTADO
        this.indicesMenuView.addSecondaryIndexListener(e -> openSecondaryIndex());

        // Multilevel Primary button - IMPLEMENTADO
        this.indicesMenuView.addMultilevelPrimaryListener(e -> openMultilevelPrimary());

        // Multilevel Secondary button - MEJORADO
        this.indicesMenuView.addMultilevelSecondaryListener(e -> openMultilevelSecondary());
    }

    /**
     * Navigate back to the main menu
     */
    private void goBackToMainMenu() {
        if (mainView != null) {
            indicesMenuView.setVisible(false);
            mainView.setVisible(true);
        }
    }

    /**
     * Open Primary Index view with its controller
     * IMPLEMENTACI√ìN COMPLETA - Conecta con la nueva funcionalidad de √≠ndice primario
     */
    private void openPrimaryIndex() {
        indicesMenuView.setVisible(false);

        try {
            // Crear vista y controlador del √≠ndice primario directamente
            PrimaryIndexView primaryIndexView = new PrimaryIndexView();
            PrimaryIndexController controller = new PrimaryIndexController(primaryIndexView);

            // Configurar navegaci√≥n de regreso al men√∫ de √≠ndices
            controller.setIndicesMenuView(indicesMenuView);

            // Mostrar la ventana del √≠ndice primario
            primaryIndexView.showWindow();

        } catch (Exception ex) {
            // Manejar cualquier error durante la inicializaci√≥n
            JOptionPane.showMessageDialog(indicesMenuView,
                    "Error al inicializar el Simulador de √çndice Primario:\n" +
                            ex.getMessage(),
                    "Error de Inicializaci√≥n",
                    JOptionPane.ERROR_MESSAGE);
            indicesMenuView.setVisible(true);
            ex.printStackTrace();
        }
    }

    /**
     * Open Secondary Index view with its controller
     * IMPLEMENTACI√ìN COMPLETA - Conecta con la funcionalidad desarrollada
     */
    private void openSecondaryIndex() {
        indicesMenuView.setVisible(false);

        try {
            // Crear vista y controlador del √≠ndice secundario
            SecondaryIndexView secondaryIndexView = new SecondaryIndexView();
            SecondaryIndexController controller = new SecondaryIndexController(secondaryIndexView);

            // Configurar navegaci√≥n de regreso al men√∫ de √≠ndices
            controller.setIndicesMenuView(indicesMenuView);

            // Mostrar la ventana del √≠ndice secundario
            secondaryIndexView.showWindow();

        } catch (Exception ex) {
            // Manejar cualquier error durante la inicializaci√≥n
            JOptionPane.showMessageDialog(indicesMenuView,
                    "Error al inicializar el Simulador de √çndice Secundario:\n" +
                            ex.getMessage(),
                    "Error de Inicializaci√≥n",
                    JOptionPane.ERROR_MESSAGE);
            indicesMenuView.setVisible(true);
            ex.printStackTrace();
        }
    }

    /**
     * Open Multilevel Primary view with its controller
     * IMPLEMENTACI√ìN COMPLETA - Conecta con la nueva funcionalidad de √≠ndices multinivel primarios
     */
    private void openMultilevelPrimary() {
        indicesMenuView.setVisible(false);

        try {
            // Crear vista y controlador mejorados para √≠ndices multinivel primarios directamente
            MultilevelPrimaryIndexView multilevelPrimaryView = new MultilevelPrimaryIndexView();
            MultilevelPrimaryIndexController controller = new MultilevelPrimaryIndexController(multilevelPrimaryView);

            // Configurar navegaci√≥n de regreso al men√∫ de √≠ndices
            controller.setIndicesMenuView(indicesMenuView);

            // Configurar el bot√≥n de detalles de niveles
            multilevelPrimaryView.addShowLevelDetailsListener(e -> showPrimaryLevelDetailsDialog(controller));

            // Mostrar la ventana
            multilevelPrimaryView.showWindow();

        } catch (Exception ex) {
            // Manejar cualquier error durante la inicializaci√≥n
            JOptionPane.showMessageDialog(indicesMenuView,
                    "Error al inicializar el sistema de √çndices Multinivel Primarios:\n" +
                            ex.getMessage(),
                    "Error de Inicializaci√≥n",
                    JOptionPane.ERROR_MESSAGE);
            indicesMenuView.setVisible(true);
            ex.printStackTrace();
        }
    }

    /**
     * Open Multilevel Secondary view with improved controller
     * VERSI√ìN MEJORADA - Integra el sistema de √≠ndices multinivel din√°micos
     */
    private void openMultilevelSecondary() {
        indicesMenuView.setVisible(false);

        try {
            // Mostrar informaci√≥n previa sobre √≠ndices multinivel secundarios
            showSecondaryMultilevelInfo();

            // Crear vista y controlador mejorados
            ImprovedMultilevelIndexView multilevelView = new ImprovedMultilevelIndexView();
            ImprovedMultilevelIndexController controller = new ImprovedMultilevelIndexController(multilevelView);

            // Configurar navegaci√≥n de regreso al men√∫ de √≠ndices
            controller.setIndicesMenuView(indicesMenuView);

            // Mostrar la ventana
            multilevelView.showWindow();

        } catch (Exception ex) {
            // Manejar cualquier error durante la inicializaci√≥n
            JOptionPane.showMessageDialog(indicesMenuView,
                    "Error al inicializar el sistema de √çndices Multinivel Secundarios:\n" +
                            ex.getMessage(),
                    "Error de Inicializaci√≥n",
                    JOptionPane.ERROR_MESSAGE);
            indicesMenuView.setVisible(true);
            ex.printStackTrace();
        }
    }

    /**
     * Muestra informaci√≥n sobre los √≠ndices multinivel secundarios
     */
    private void showSecondaryMultilevelInfo() {
        String info = """
                üîç √çNDICES MULTINIVEL SECUNDARIOS üîç
                
                CARACTER√çSTICAS PRINCIPALES:
                ‚úÖ Organizaci√≥n independiente de los datos principales
                ‚úÖ Flexibilidad en campos de indexaci√≥n
                ‚úÖ M√∫ltiples √≠ndices sobre el mismo conjunto de datos
                ‚úÖ B√∫squeda eficiente sin alterar orden f√≠sico
                
                VENTAJAS:
                ‚Ä¢ B√∫squedas por cualquier campo indexado
                ‚Ä¢ No requiere reorganizaci√≥n f√≠sica de datos
                ‚Ä¢ Soporte para m√∫ltiples criterios de b√∫squeda
                ‚Ä¢ Flexibilidad en la estructura de acceso
                
                APLICACIONES:
                ‚Ä¢ Consultas por campos no clave
                ‚Ä¢ Sistemas con m√∫ltiples patrones de acceso
                ‚Ä¢ Bases de datos con consultas diversas
                
                El sistema generar√° autom√°ticamente la estructura
                multinivel √≥ptima seg√∫n la configuraci√≥n.
                """;

        JOptionPane.showMessageDialog(indicesMenuView, info,
                "Informaci√≥n: √çndices Multinivel Secundarios", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Muestra el di√°logo de detalles de niveles para √≠ndices primarios
     */
    private void showPrimaryLevelDetailsDialog(MultilevelPrimaryIndexController controller) {
        try {
            StringBuilder details = new StringBuilder();

            details.append("=== AN√ÅLISIS DETALLADO - √çNDICES MULTINIVEL PRIMARIOS ===\n\n");

            details.append("CARACTER√çSTICAS DEL √çNDICE PRIMARIO:\n");
            details.append("‚Ä¢ Organizaci√≥n: Secuencial por clave principal\n");
            details.append("‚Ä¢ Acceso: Directo mediante estructura multinivel\n");
            details.append("‚Ä¢ Ordenamiento: F√≠sico de los datos por campo clave\n");
            details.append("‚Ä¢ Eficiencia: O(log n) para b√∫squedas\n\n");

            details.append("ESTRUCTURA DE NIVELES:\n");
            details.append("‚Ä¢ Nivel 0 (Datos): Registros ordenados f√≠sicamente\n");
            details.append("‚Ä¢ Nivel 1 (√çndice Primario): Apunta a bloques de datos\n");
            details.append("‚Ä¢ Niveles Superiores: √çndices sobre √≠ndices\n");
            details.append("‚Ä¢ Nivel Ra√≠z: Entrada √∫nica al sistema\n\n");

            details.append("VENTAJAS T√âCNICAS:\n");
            details.append("‚úì Acceso secuencial eficiente\n");
            details.append("‚úì B√∫squedas por rango optimizadas\n");
            details.append("‚úì Localidad de referencia mejorada\n");
            details.append("‚úì Menor fragmentaci√≥n de datos\n\n");

            details.append("CONSIDERACIONES:\n");
            details.append("‚Ä¢ Mantenimiento del orden en inserciones\n");
            details.append("‚Ä¢ Reorganizaci√≥n en eliminaciones masivas\n");
            details.append("‚Ä¢ Eficiencia m√°xima en consultas por clave\n");
            details.append("‚Ä¢ Ideal para patrones de acceso secuencial\n\n");

            details.append("M√âTRICAS DE RENDIMIENTO:\n");
            details.append("‚Ä¢ Comparaciones por b√∫squeda: log‚ÇÇ(n)\n");
            details.append("‚Ä¢ Accesos a disco: Altura del √°rbol\n");
            details.append("‚Ä¢ Espacio adicional: ~15% para √≠ndices\n");
            details.append("‚Ä¢ Eficiencia de almacenamiento: Alta\n\n");

            details.append("Para an√°lisis espec√≠fico de su configuraci√≥n,\n");
            details.append("utilice las herramientas de configuraci√≥n t√©cnica.");

            // Mostrar el di√°logo usando el m√©todo de la vista
            MultilevelPrimaryIndexView view = (MultilevelPrimaryIndexView) controller.getClass()
                    .getDeclaredField("view").get(controller);
            view.showLevelDetailsDialog(details.toString());

        } catch (Exception e) {
            // Fallback si hay error accediendo a la vista
            JOptionPane.showMessageDialog(indicesMenuView,
                    "Detalles t√©cnicos de √≠ndices multinivel primarios disponibles " +
                            "en la interfaz principal mediante el bot√≥n 'Ver Detalles Niveles'.",
                    "Informaci√≥n T√©cnica", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * Show the indices menu view
     */
    public void showView() {
        indicesMenuView.showWindow();
    }

    /**
     * Get the indices menu view instance
     */
    public IndicesMenuView getView() {
        return indicesMenuView;
    }

    /**
     * Muestra an√°lisis comparativo entre √≠ndices primarios y secundarios
     * M√âTODO ACTUALIZADO - Incluye comparaci√≥n con √≠ndice primario simple
     */
    private void showComparativeAnalysis() {
        StringBuilder analysis = new StringBuilder();

        analysis.append("=== AN√ÅLISIS COMPARATIVO: TIPOS DE √çNDICES ===\n\n");

        analysis.append("√çNDICE PRIMARIO SIMPLE:\n");
        analysis.append("‚úÖ Datos f√≠sicamente ordenados\n");
        analysis.append("‚úÖ Una entrada por bloque de datos\n");
        analysis.append("‚úÖ Acceso directo muy eficiente\n");
        analysis.append("‚úÖ Menor overhead de almacenamiento\n");
        analysis.append("‚ùå Solo para consultas por clave principal\n");
        analysis.append("‚ùå Mantenimiento del orden requerido\n\n");

        analysis.append("√çNDICE SECUNDARIO:\n");
        analysis.append("‚úÖ Flexibilidad en campos de b√∫squeda\n");
        analysis.append("‚úÖ No altera organizaci√≥n f√≠sica\n");
        analysis.append("‚úÖ Una entrada por registro\n");
        analysis.append("‚úÖ M√∫ltiples √≠ndices posibles\n");
        analysis.append("‚ùå Mayor overhead de almacenamiento\n");
        analysis.append("‚ùå Acceso indirecto a los datos\n\n");

        analysis.append("√çNDICES MULTINIVEL PRIMARIOS:\n");
        analysis.append("‚úÖ Escalabilidad para grandes vol√∫menes\n");
        analysis.append("‚úÖ Acceso secuencial √≥ptimo\n");
        analysis.append("‚úÖ Estructura jer√°rquica eficiente\n");
        analysis.append("‚ùå Complejidad en mantenimiento\n\n");

        analysis.append("√çNDICES MULTINIVEL SECUNDARIOS:\n");
        analysis.append("‚úÖ Flexibilidad m√°xima en consultas\n");
        analysis.append("‚úÖ Escalabilidad independiente\n");
        analysis.append("‚úÖ M√∫ltiples criterios de acceso\n");
        analysis.append("‚ùå Mayor complejidad de gesti√≥n\n\n");

        analysis.append("RECOMENDACIONES DE USO:\n");
        analysis.append("‚Ä¢ Primario Simple: Aplicaciones peque√±as/medianas con acceso por clave\n");
        analysis.append("‚Ä¢ Secundario: Consultas por campos diversos\n");
        analysis.append("‚Ä¢ Multinivel Primario: Grandes vol√∫menes con acceso secuencial\n");
        analysis.append("‚Ä¢ Multinivel Secundario: Sistemas complejos con m√∫ltiples patrones\n\n");

        analysis.append("Todas las implementaciones incluyen simuladores\n");
        analysis.append("y calculadoras autom√°ticas de estructura.");

        JOptionPane.showMessageDialog(indicesMenuView, analysis.toString(),
                "An√°lisis Comparativo Completo", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Adapter class to handle navigation back to indices menu
     * This allows the MultilevelIndexController to return to the indices menu
     * instead of the original AlgorithmMenuView
     */
    private class AlgorithmMenuAdapter {

        public void setVisible(boolean visible) {
            if (visible) {
                indicesMenuView.setVisible(true);
            }
        }

        public void dispose() {
            // No action needed for the adapter
        }
    }
}